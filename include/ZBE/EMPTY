TODO:


V - Colocar varias plataformas para comprobar como funciona la transición entre ellas.


V- En el aire apretar teclas consume un timer (combustible) tocar plataformas carga combustible.

------ En marcha
V - Barra energía.
 Pintador en 2D en función de una uint del prota.

V - TODO: Mirar como funcionan pintadores en 2D para hacer/usar uno que reciba un parámetro (vida)

V - "Gravedad" lineal hacia el plano más cercano
  Comportamiento que accede a una lista en la que los planos publican su posición y calcula el más cercano... o la suma.
  Con ello calcula una velicidad que guarda en el prota.

?? - Eliminar chorroplanos (Degryll dixit) ¿Creamos otro tipo de balas?
?? - Poner vida a los planos creados. Cuando llega a cero el plano desaparece.
  ¿Como se gasta esa vida? ->¿Por tiempo?<- ¿Por movimiento por el plano?

Muerte: energía llega a cero.
Meta: la tocas y has ganado.

-------------------------------------------------------

Ideas:

Quitar el suelo. Debe haber un límite del mapa y tenemos que pensar que hacer cuando lo alcaces.
Objetivo: Llegar a una meta.
Dispones de unas plataformas fijas y otras que puedes colocar disparando castañas y dando a una tecla.
Hay que poner algún tipo de atracción por las plataformas que te impidan llegar a esa meta volando.


-------------------------------------------------------
Tercera persona shooter:
  ws: Personaje anda alante atras en dirección a donde mira.
  ad: Personaje anda perpendicular a dirección donde mira.
  Ratón: Gira vista personaje y la cámara se mantiene detrás.

Tercera persona no shooter:
  ws: Personaje anda alante atras en dirección a donde mira LA CAMARA pero en el plano en el que se encuentra.
  ad: Personaje anda perpendicular a dirección donde mira LA CAMARA pero en el plano en el que se encuentra.
  Ratón: Gira la cámara alrededor del personaje.
  La cámara siempre mira al personaje.
  La cámara mantiene la distancia con el personaje.

Primera persona modos dios:
  Cámara centrada en personaje.
  ws: Mueve cámare alante atras en el plano horizontal
  ad: Mueve cámare lateralmente en el plano horizontal
  shift/espacio: Sube y baja perpendicular al plano
  Ratón: Gira la cámara alrededor del personaje.

Primera persona naves con desplazamiento lateral
Primera persona naves sin desplazamiento lateral (suba/bajas/laterles con angulo)
Modo espectador Minecraft

Necesitamos poder volcar a disco las entidades y cargarlas.

-------------------------------------------------------------------

V - Replicar builders de gotas para crear plataformas
V - Crea plataforma en misma posición y orientación que la gota.
V - La gota desaparece

????? -- ¿EEH? Hay alguien por ahí que tiene que hacer una textura.

---------------------------


// TODO crer issue para modificar EntityEraserTH para que use un avatar y no una entidad

----------------------------------------

V - Demonio condicional que, cuando la sangre llegue a cero, ejecute las activaciones/desactivaciones necesarias para entrar en caida
V - .... y luego la caida, que eso ya tiene más miga :D


Quitar zbe:: atributos CollisionData
Renombrar getCollision en IEG

Herramienta:

El sistema de carga del JSON tiene que tener ya creada a priori una serie valores constantes como:
ZERO
MAX
MIN
ONE
NEGONE

Estos valores tiene que estar disponibles para todos los tipos para los que tenga sentido.

Revisar dependencias de SDL. En linux obliga a hacer una ñapa con un vínculo dinámico a libsnd 6.1 que ya no está disponible.

Hay que crear una meta: Entidad con la que, al colisionar, se da el "nivel" por acabado.
  Caja de colisión esférica.
  En la reacción acaba el nivel.

¿Como mierda hacemos varios niveles?
  Eliminar todas las plataformas.
  Crear nuevas.
  Crear meta.

Pantalla de transicion. (con puntos)
Pantalla de victoria. (con puntos)
Tecla de reiniciar nivel

Transición entre niveles: ¿Con tres niveles nos vale?
Puntuación 
  ¿Por uso de plataformas?
  ¿Por uso de sangre?
Cuanto más cerca de cero mejor.

